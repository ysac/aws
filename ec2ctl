#!/bin/sh
#
# aws ec2 instance control script
#

# DEFAULT SETTING
DEFAULT_AMI_ID='ami-cbf90ecb'
DEFAULT_INSTANCE_TYPE='t2.micro'
DEFAULT_SECURITY_GROUP='sg-b06e05d5'
DEFAULT_SSH_KEY='aws-personal'
SSH_CONFIG="${HOME}/.ssh/config"


usage() {

  echo "Usage: $0 command [ OPTION ]"
  echo "  list"
  echo "  info [ INSTANCE_ID ]"
  echo "  status [ INSTANCE_ID ]"
  echo "  public-ip [ INSTANCE_ID ]"
  echo "  private-ip [ INSTANCE_ID ]"
  echo "  create NAME_TAG [ SSH_KEY_NAME ]"
  echo "  start [ INSTANCE_ID | -k keyword | --all ]"
  echo "  stop [ INSTANCE_ID | -k keyword | --all ]"
  echo "  terminate INSTANCE_ID"
  echo "  ssh-config"

}


get_instance_id() {

  aws ec2 describe-instances | \
    jq -r '.Reservations[].Instances[].InstanceId'

}


search_name_tag() {

  _keyword=$1

  aws ec2 describe-instances | \
    jq -r ".Reservations[].Instances[] | select(.Tags[] | .Key==\"Name\" and (.Value | contains(\"${_keyword}\"))).InstanceId"

}


get_instance_info() {

  _instance_id=$1

  if [ -n "${_instance_id}" ]; then
    aws ec2 describe-instances \
      --instance-ids ${_instance_id}
  else
    aws ec2 describe-instances
  fi

}


get_instance_list() {

  aws ec2 describe-instances | \
    jq -r '.Reservations[].Instances[] | "\(.Tags[] | select(.Key=="Name").Value),\(.InstanceId),\(.State.Name),\(.PublicIpAddress),\(.PrivateIpAddress)"'

}


get_instance_status() {

  _instance_id=$1

  if [ -n "${_instance_id}" ]; then
    aws ec2 describe-instances \
      --instance-ids ${_instance_id} | \
      jq -r '.Reservations[].Instances[].State.Name'
  else
    aws ec2 describe-instances | \
      jq -r '.Reservations[].Instances[] | "\(.InstanceId): \(.State.Name)"'
  fi

}


get_public_ip() {

  _instance_id=$1

  if [ -n "${_instance_id}" ]; then
    aws ec2 describe-instances \
      --instance-ids ${_instance_id} | \
      jq -r '.Reservations[].Instances[].PublicIpAddress'
  else
    aws ec2 describe-instances | \
      jq -r '.Reservations[].Instances[] | "\(.InstanceId): \(.PublicIpAddress)"'
  fi

}


get_private_ip() {

  _instance_id=$1

  if [ -n "${_instance_id}" ]; then
    aws ec2 describe-instances \
      --instance-ids ${_instance_id} | \
      jq -r '.Reservations[].Instances[].PrivateIpAddress'
  else
    aws ec2 describe-instances | \
      jq -r '.Reservations[].Instances[] | "\(.InstanceId): \(.PrivateIpAddress)"'
  fi

}


check_instance_status() {

  _instance_id=$1
  _check_status=$2

  if [ -z "${_instance_id}" ]; then
    echo "WARN: instance-id is null"
    return 1
  fi

  if [ -z "${_check_status}" ]; then
    echo "WARN: check status is null"
    return 1
  fi

  _instance_status=`get_instance_status ${_instance_id}`
  if [ "${_instance_status}" != "${_check_status}" ]; then
    echo "WARN: ${_instance_id} status is not ${_check_status} (${_instance_status})"
    return 1
  fi

  return 0

}


create_instance() {

  _name_tag=$1
  _key_name=$2

  if [ -z "${_name_tag}" ]; then
    echo "WARN: NAME_TAG is null"
    return 1
  fi

  if [ -z "${_key_name}" ]; then
    _key_name=${DEFAULT_SSH_KEY}
  fi

  _instance_id=`aws ec2 run-instances \
    --count 1 \
    --image-id ${DEFAULT_AMI_ID} \
    --instance-type ${DEFAULT_INSTANCE_TYPE} \
    --security-group-ids ${DEFAULT_SECURITY_GROUP} \
    --key-name ${_key_name} \
    --query "Instances[].InstanceId" \
    --output text`

  echo ${_instance_id} | egrep '^i-' >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "WARN: instance create failed"
    return 1
  fi

  aws ec2 create-tags \
    --resources ${_instance_id} \
    --tags "[{\"Key\": \"Name\", \"Value\": \"${_name_tag}\"}]"

}


start_instance() {

  _instance_id=$1

  check_instance_status "${_instance_id}" "stopped"
  if [ $? -ne 0 ]; then
    return 1
  fi

  aws ec2 start-instances \
    --instance-ids ${_instance_id}

  return $?

}


start_instances() {

  _arg1=$1
  _arg2=$2

  if [ "${_arg1}" = "--all" ]; then
    for _id in `get_instance_id`
    do
      start_instance ${_id}
    done
  elif [ "${_arg1}" = "-k" ]; then
    for _id in `search_name_tag ${_arg2}`
    do
      start_instance ${_id}
    done
  else
    start_instance ${_arg1}
  fi

  return $?

}


stop_instance() {

  _instance_id=$1

  check_instance_status "${_instance_id}" "running"
  if [ $? -ne 0 ]; then
    return 1
  fi

  aws ec2 stop-instances \
    --instance-ids ${_instance_id}

  return $?

}


stop_instances() {

  _arg1=$1
  _arg2=$2

  if [ "${_arg1}" = "--all" ]; then
    for _id in `get_instance_id`
    do
      stop_instance ${_id}
    done
  elif [ "${_arg1}" = "-k" ]; then
    for _id in `search_name_tag ${_arg2}`
    do
      stop_instance ${_id}
    done
  else
    stop_instance ${_arg2}
  fi

}


terminate_instance() {

  _instance_id=$1

  check_instance_status "${_instance_id}" "stopped"
  if [ $? -ne 0 ]; then
    return 1
  fi

  aws ec2 terminate-instances \
    --instance-ids ${_instance_id}

  return $?

}


create_ssh_config() {

  for line in `get_instance_list`
  do
    host=`echo ${line} | awk -F, '{print $1}'`
    ip=`echo ${line} | awk -F, '{print $4}'`
    ( echo "Host ${host}"
      echo "  HostName ${ip}"
      echo "  IdentityFile ~/.ssh/aws-personal.pem"
      echo "  User ec2-user"
      echo ) >> ${SSH_CONFIG}
    echo "add: ${host}"
  done

}


#
# main
#
command=$1
shift

case "${command}" in
  "list")
    get_instance_list
    ;;
  "info")
    get_instance_info $1
    ;;
  "status")
    get_instance_status $1
    ;;
  "public-ip")
    get_public_ip $1
    ;;
  "private-ip")
    get_private_ip $1
    ;;
  "create")
    create_instance $*
    ;;
  "start")
    start_instances $*
    ;;
  "stop")
    stop_instances $*
    ;;
  "terminate")
    terminate_instance $1
    ;;
  "ssh-config")
    create_ssh_config
    ;;
  *)
    usage
    exit 1
    ;;
esac

exit $?
